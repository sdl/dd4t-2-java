<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/jms
        http://www.springframework.org/schema/jms/spring-jms.xsd">

    <!-- Configure PlaceHolder Properties -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list merge="true">
                <value>classpath:dd4t.properties</value>
            </list>
        </property>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="ignoreResourceNotFound" value="true"/>
    </bean>
    <!-- Configure me: change this to the base-package where your overridden controllers are -->
    <context:component-scan base-package="org.dd4t.test.web.controller" annotation-config="true"/>

    <!--
        DD4T Controllers
        If you use yor own controllers, change the class names here
    -->
    <bean id="pageController" class="org.dd4t.test.web.controller.SpringPageController">
        <property name="pageViewPath" value="pages/"/>
        <property name="publicationResolver" ref="publicationResolver"/>
        <property name="pageFactory" ref="pageFactory"/>
        <property name="removeContextPath" value="true"/>
    </bean>

    <bean id="componentPresentationController"
          class="org.dd4t.test.web.controller.SpringComponentPresentationController">
        <property name="componentViewPath" value="components/"/>
    </bean>

    <bean id="binaryController" class="org.dd4t.test.web.controller.SpringBinaryController">
        <property name="binaryRootFolder" value="~/media"/>
    </bean>

    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <bean id="publicationResolver" class="org.dd4t.core.resolvers.impl.UrlPublicationResolver">
        <property name="publicationProvider" ref="publicationProvider"/>
        <!-- Set to true to use cd_dynamic_conf.xml to figure out publication Ids -->
        <property name="useCdDynamic" value="${publication.resolving.use.cd.dynamic}"/>
        <!-- Set to true if you DON'T publish the context path as part of the Tridion Publication Url -->
        <property name="stripServletContextPath" value="${publication.resolving.strip.context.path}"/>
    </bean>

    <bean id="propertiesService" class="org.dd4t.mvc.utils.PropertiesServiceImpl">
        <property name="location" value="dd4t.properties"/>
    </bean>

    <bean id="publicationResolverFactory" factory-method="getInstance"
          class="org.dd4t.mvc.utils.PublicationResolverFactory">
        <property name="publicationResolver" ref="publicationResolver"/>

    </bean>

    <!-- Factory Processor Beans -->
    <bean id="linkResolverProcessor"
          class="org.dd4t.core.processors.impl.LinkingProcessor">
        <property name="runPhase" value="AFTER_CACHING"/>
    </bean>

    <!-- DD4T Provider beans -->
    <bean id="cacheProvider" class="org.dd4t.caching.providers.EHCacheProvider">
        <property name="enabled" value="${cache.enabled}" />
        <property name="cacheTTL" value="${cache.ttl}" />
        <property name="cacheDependencyTTL" value="${cache.dependency.ttl}" />
        <property name="expiredTTL" value="${cache.expired.ttl}" />
    </bean>
    <bean id="binaryProvider" class="org.dd4t.providers.impl.BrokerBinaryProvider">
        <property name="contentIsCompressed" value="true"/>
        <property name="cacheProvider" ref="cacheProvider"/>
    </bean>

    <bean id="componentPresentationProvider" class="org.dd4t.providers.impl.BrokerComponentPresentationProvider">
        <property name="contentIsCompressed" value="true"/>
        <property name="cacheProvider" ref="cacheProvider"/>
    </bean>

    <bean id="pageProvider" class="org.dd4t.providers.impl.BrokerPageProvider">
        <property name="contentIsCompressed" value="true"/>
        <property name="cacheProvider" ref="cacheProvider"/>
    </bean>

    <bean id="linkProvider" class="org.dd4t.providers.impl.BrokerLinkProvider">
        <property name="contentIsCompressed" value="true"/>
    </bean>


    <bean id="publicationProvider" class="org.dd4t.providers.impl.BrokerPublicationProvider">
        <property name="publicationDescriptor" value="org.dd4t.contentmodel.impl.PublicationDescriptorImpl"/>
        <property name="cacheProvider" ref="cacheProvider"/>
    </bean>

    <bean id="linkResolver" class="org.dd4t.core.resolvers.impl.DefaultLinkResolver"/>

    <!-- DD4T Factories -->
    <bean id="pageFactory" class="org.dd4t.core.factories.impl.PageFactoryImpl"
          factory-method="getInstance">
        <property name="pageProvider" ref="pageProvider"/>
        <property name="cacheProvider" ref="cacheProvider"/>
        <property name="requestContextClass" value="org.dd4t.core.util.HttpRequestContext"/>
        <property name="processors">
            <list>
                <ref bean="linkResolverProcessor"/>
            </list>
        </property>
    </bean>
    <bean id="componentPresentationFactory" class="org.dd4t.core.factories.impl.ComponentPresentationFactoryImpl"
          factory-method="getInstance">
        <property name="componentPresentationProvider" ref="componentPresentationProvider"/>
        <property name="cacheProvider" ref="cacheProvider"/>
        <property name="requestContextClass" value="org.dd4t.core.util.HttpRequestContext"/>
        <property name="processors">
            <list>
                <ref bean="linkResolverProcessor"/>
            </list>
        </property>
        <property name="dataBinders">
            <list>
                <ref bean="dataBinder"/>
            </list>
        </property>
    </bean>

    <bean id="binaryFactory" class="org.dd4t.core.factories.impl.BinaryFactoryImpl" factory-method="getInstance">
        <property name="binaryProvider" ref="binaryProvider"/>
        <property name="cacheProvider" ref="cacheProvider"/>
        <property name="requestContextClass" value="org.dd4t.core.util.HttpRequestContext"/>
    </bean>

    <bean id="serializer" class="org.dd4t.core.serializers.impl.json.JSONSerializer"/>
    <bean id="serializerFactory" class="org.dd4t.core.serializers.impl.SerializerFactory" factory-method="getInstance">
        <property name="serializer" ref="serializer"/>
    </bean>

    <!-- Taxonomy Stuff -->
    <bean id="taxonomyProvider" class="org.dd4t.providers.impl.BrokerTaxonomyProvider"/>

    <bean id="taxonomyFactory" class="org.dd4t.core.factories.impl.TaxonomyFactoryImpl" factory-method="getInstance">
        <property name="taxonomyProvider" ref="taxonomyProvider"/>
        <property name="cacheProvider" ref="cacheProvider"/>
    </bean>

    <!-- Databind stuff.-->
    <bean id="modelConverter" class="org.dd4t.databind.builder.json.JsonModelConverter"/>
    <bean id="dataBinder" class="org.dd4t.databind.builder.json.JsonDataBinder" factory-method="getInstance">
        <!-- Set this value to your own models package root -->
        <property name="viewModelPackageRoot" value="${databind.viewmodels.rootpackage}"/>
        <property name="viewModelMetaKeyName" value="${databind.viewmodels.ct.metadata.viewnamekey}"/>
        <!-- Set these to your need. If you only want regular Components set to true -->
        <property name="renderDefaultComponentModelsOnly" value="false"/>
        <property name="renderDefaultComponentsIfNoModelFound" value="true"/>
        <property name="converter" ref="modelConverter"/>
        <!-- override these if you want your own implementations -->
        <property name="concreteComponentPresentationImpl"
                  value="org.dd4t.contentmodel.impl.ComponentPresentationImpl"/>
        <property name="concreteComponentTemplateImpl" value="org.dd4t.contentmodel.impl.ComponentTemplateImpl"/>
        <property name="concreteComponentImpl" value="org.dd4t.contentmodel.impl.ComponentImpl"/>
        <property name="concreteFieldImpl" value="org.dd4t.contentmodel.impl.BaseField"/>
    </bean>

    <bean id="databindFactory" class="org.dd4t.databind.DataBindFactory" factory-method="createInstance">
        <constructor-arg ref="dataBinder"/>
    </bean>

    <!-- Experience Manager -->
    <bean id="xpmRender" class="org.dd4t.mvc.utils.XPMRenderer" factory-method="getInstance">
        <property name="enabled" value="${xpm.enabled}"/>
        <property name="cmsUrl" value="${xpm.cmsUrl}"/>
    </bean>

    <!--
        JMS Caching. Only turn this on if your deployer is configured to use JMS.
        This implementation also requires a dependency on org.apache.activemq:activemq-client:5.10.0+

        Make sure to set the brokerURL, userName and password properties in dd4t.properties,
        as well as the JMS topic in the listener config
    -->

    <bean id="cacheMessageListener" class="org.dd4t.caching.jms.impl.JMSCacheMessageListener"/>
    <bean id="jmsExceptionListener" class="org.dd4t.caching.jms.impl.JMSExceptionListener"/>
    <bean id="jmsCacheMonitor" class="org.dd4t.caching.jms.impl.JMSCacheMonitor"/>
    <bean id="jmsTransportListener" class="org.dd4t.caching.jms.impl.JMSTransportListener"/>

    <bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="${jms.brokerUrl}"/>
        <property name="userName" value="${jms.userName}"/>
        <property name="password" value="${jms.password}"/>
        <property name="exceptionListener" ref="jmsExceptionListener"/>
        <property name="transportListener" ref="jmsTransportListener"/>
    </bean>

    <jms:listener-container container-type="default" destination-type="topic" connection-factory="connectionFactory"
                            acknowledge="auto">
        <jms:listener destination="${jms.topicName}" ref="cacheMessageListener" method="onMessage"/>
    </jms:listener-container>
</beans>